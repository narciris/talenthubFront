name: Deploy Front Angular

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Checkout del c√≥digo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Verificar existencia de secretos
      - name: Debug Secrets (solo existencia, no valores)
        run: |
          echo "Verificando que existan secrets..."
          echo "SERVER_HOST: ${{ secrets.SERVER_HOST && 'OK' || ' FALTA' }}"
          echo "SERVER_USERNAME: ${{ secrets.SERVER_USERNAME && 'OK' || ' FALTA' }}"
          echo "SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY && ' OK' || 'FALTA' }}"

      # 3Ô∏è‚É£ Crear archivo de clave SSH temporal
      - name: Crear archivo de clave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/temp_key
          sed -i 's/\\n/\n/g' ~/.ssh/temp_key
          chmod 600 ~/.ssh/temp_key
          echo "Clave SSH creada"

      # 4Ô∏è‚É£ Agregar host a known_hosts
      - name: Add host to known_hosts
        run: |
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts 2>/dev/null
          echo "‚úÖ Host agregado a known_hosts"

      # 5Ô∏è‚É£ Probar conexi√≥n SSH
      - name: Test SSH Connection
        run: |
          echo "üîπ Probando conexi√≥n SSH..."
          ssh -i ~/.ssh/temp_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} "echo '‚úÖ SSH OK' && whoami"

      # 6Ô∏è‚É£ Configurar Node
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # 7Ô∏è‚É£ Instalar dependencias
      - name: Install dependencies
        run: npm ci

      # 8Ô∏è‚É£ Construir Angular App
      - name: Build Angular App
        run: npm run build -- --configuration production

      # 9Ô∏è‚É£ Verificar que dist se cre√≥
      - name: Verify dist folder
        run: |
          echo " Contenido de dist/:"
          ls -la dist/
          echo " Tama√±o:"
          du -sh dist/
          if [ ! -d "dist" ]; then
            echo " ERROR: Carpeta dist no existe"
            exit 1
          fi
          echo " Carpeta dist verificada"

      # üîü Subir archivos via SCP
      - name: Upload files via SCP
        run: |
          echo " Subiendo archivos a servidor..."
          scp -i ~/.ssh/temp_key -r -o StrictHostKeyChecking=no dist/talent-hub/browser/* \
            ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }}:/var/www/talenthub/talentFront/dist/browser/
          echo "Archivos subidos exitosamente"

      # 1Ô∏è‚É£1Ô∏è‚É£ Limpiar y reorganizar en servidor
      - name: Cleanup and verify on server
        run: |
          ssh -i ~/.ssh/temp_key -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "üîß Limpiando servidor..."
          
          # Verificar que los archivos se subieron
          if [ ! -f "/var/www/talenthub/talentFront/dist/browser/index.html" ]; then
            echo "ERROR: index.html no encontrado en servidor"
            ls -la /var/www/talenthub/talentFront/dist/browser/
            exit 1
          fi
          
          echo " index.html encontrado"
          
          # Mostrar archivos subidos
          echo " Archivos en servidor:"
          ls -la /var/www/talenthub/talentFront/dist/browser/ | head -15
          
          # Actualizar permisos
          sudo chown -R apache:apache /var/www/talenthub/talentFront/dist/
          sudo chmod -R 755 /var/www/talenthub/talentFront/dist/
          
          echo " Permisos actualizados"
          
          # Recargar Apache
          sudo systemctl reload httpd || sudo systemctl restart httpd
          
          echo "Apache recargado"
          
          EOF

      # 1Ô∏è‚É£2Ô∏è‚É£ Health check
      - name: Health Check
        run: |
          echo "Verificando que la app est√° disponible..."
          sleep 3
          
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://${{ secrets.SERVER_HOST }}/)
          
          echo "HTTP Status: $HTTP_CODE"
          
          if [ "$HTTP_CODE" = "200" ]; then
            echo "Deploy completado exitosamente"
          else
            echo "C√≥digo HTTP: $HTTP_CODE"
          fi

      # 1Ô∏è‚É£3Ô∏è‚É£ Limpiar clave SSH
      - name: Cleanup SSH key
        if: always()
        run: |
          rm -f ~/.ssh/temp_key
          echo " Clave SSH eliminada"